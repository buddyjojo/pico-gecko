.program exitx

start:
	wait 1 gpio 6 [10] ;	First bit in command will alway be 1
	jmp pin cswait [17] ;	0xC/D 11xx and 0xA/B 101x
	jmp pin cswait ;		0xB/9 1011/1001
	set pins 1 [4] ;		0xA   1010
	set pins 0 [3]
	set y, 7 [25]
outloop:
	out pins, 1
	jmp y-- outloop [9]
cswait:
	set pins 0 [20]
	pull
	wait 1 gpio 5;	CS

% c-sdk {
#include <hardware/clocks.h>

static inline void exitx_program_init(PIO pio, uint sm, uint offset,
		uint pindi, uint pindo, bool en) {

	pio_gpio_init(pio, pindi);
	pio_gpio_init(pio, pindo);

	pio_sm_set_consecutive_pindirs(pio, sm, pindi, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, pindo, 1, true);

	pio_sm_config c = exitx_program_get_default_config(offset);

	sm_config_set_out_pins(&c, pindo, 1);
	sm_config_set_jmp_pin(&c, pindi);
	sm_config_set_set_pins(&c, pindo, 1);

	sm_config_set_clkdiv(&c, 1);

	sm_config_set_out_shift(
		&c,
		false, // Shift-to-right = false (i.e. shift to left)
		true,  // Autopull enabled
		8      // Autopull threshold = 8
	);


	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    
	pio_sm_init(pio, sm, offset, &c);
	pio->input_sync_bypass = (1u<<pindi);
	pio_sm_set_enabled(pio, sm, en);
}

static inline void exi_put(PIO pio, uint sm, uint8_t x) {
    while (pio_sm_is_tx_fifo_full(pio, sm))
        ;
    *(volatile uint8_t*)&pio->txf[sm] = x;
}

%}

