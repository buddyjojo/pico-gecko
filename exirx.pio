.program exirx

.wrap_target

; Each EXI clock period at clk 101 (25mhz) is 10 cycles at 250mhz

start:
	wait 0 gpio 4 [31]
	wait 1 gpio 5 [9] ;		First bit in command will alway be 1
	jmp pin cmdcd [9] ;		0xC/D 11xx
	jmp pin cmdab [9] ;		0xA/B 101x

cmdcd:
	jmp pin cmdid  [9] ;	0x9   1001
	jmp pin cswait [9] ;	0xD   1101 (handled by exitx)

cmdid:
	set pins 1 [5]
	set pins 0 [31]
	set pins 1 [30]
	set pins 0 [20]
	jmp cswait

cmdb:
	in pins, 1

	set pins 1 [5]
	set pins 0

	set y, 6
bitloop:
	in pins, 1
	jmp y-- bitloop [9]

cmdab:
	jmp pin cmdb [9] ;		0xB   1011
cswait:
	wait 1 gpio 4 [31] ;	CS
.wrap

% c-sdk {
#include <hardware/clocks.h>

static inline void exirx_program_init(PIO pio, uint sm, uint offset,
		uint pindi, uint pindo, uint pincs, uint pinclk, bool en) {

	pio_gpio_init(pio, pindi);
	pio_gpio_init(pio, pindo);
	pio_gpio_init(pio, pincs);
	pio_gpio_init(pio, pinclk);

	pio_sm_set_consecutive_pindirs(pio, sm, pindi, 1, false);
	pio_sm_set_consecutive_pindirs(pio, sm, pindo, 1, true);

	pio_sm_config c = exirx_program_get_default_config(offset);

	sm_config_set_in_pins(&c, pindi);
	sm_config_set_jmp_pin(&c, pindi);
	sm_config_set_set_pins(&c, pindo, 1);

	sm_config_set_clkdiv(&c, 1);

	sm_config_set_in_shift(
		&c,
		false, // Shift-to-right = false (i.e. shift to left)
		true,  // Autopush enabled
		8      // Autopush threshold = 8
	);

	sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_RX);
    
	pio_sm_init(pio, sm, offset, &c);
	pio->input_sync_bypass = (1u<<pindi);
	pio_sm_set_enabled(pio, sm, en);
}

%}

